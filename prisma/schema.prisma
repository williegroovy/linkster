// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sessions")
}

type Address {
  street     String
  city       String
  state      String
  postalCode String
  country    String
}

type Location {
  city       String
  state      String
  postalCode String
  country    String
}

model Trade {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String           @unique
  projectLineItems TradeLineItems[]

  contractors ContractorTrade[]

  @@map("trades")
}

model TradeLineItems {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tradeId   String  @db.ObjectId
  trade     Trade   @relation(fields: [tradeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("trade_line_items")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  address     Address?

  tradeIds  String[]         @db.ObjectId
  trades    TradeLineItems[]
  createdAt DateTime         @default(now())
  updatedAt DateTime?

  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractorId String     @db.ObjectId

  subContractos ProjectSubContractor[]

  clientProfile Client? @relation(fields: [clientId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  clientId      String? @db.ObjectId

  @@map("projects")
}

model ProjectSubContractor {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  projectId    String     @db.ObjectId
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractorId String     @db.ObjectId
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("project_sub_contractors")
}

model Client {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  companyName String

  projects  Project[]
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String?   @unique @db.ObjectId

  @@map("clients")
}

model ServiceArea {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  location     Location
  serviceRange Int?

  contractorIds String[]     @db.ObjectId
  contractors   Contractor[] @relation(fields: [contractorIds], references: [id])

  @@map("service_areas")
}

model ContractorTrade {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  tradeId      String     @db.ObjectId
  trade        Trade      @relation(fields: [tradeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractorId String     @db.ObjectId
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("contractor_trade")
}

model Contractor {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  address     Address?

  projects              Project[]
  subContractedProjects ProjectSubContractor[]

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String?  @unique @db.ObjectId

  serviceAreaIds String[]      @db.ObjectId
  serviceAreas   ServiceArea[] @relation(fields: [serviceAreaIds], references: [id])

  trades ContractorTrade[]

  @@map("contractors")
}

model Profile {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  address           Address?
  clientProfile     Client?
  contractorProfile Contractor?
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String      @unique @db.ObjectId

  onboarded Boolean @default(false)

  @@map("profiles")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("verifiedAt")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  profile Profile?

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}
